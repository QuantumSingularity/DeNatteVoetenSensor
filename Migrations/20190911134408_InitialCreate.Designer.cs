// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Nvs.Models.Postgresql;

namespace DeNatteVoetenSensor.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20190911134408_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Nvs.Models.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BatteryVoltage");

                    b.Property<DateTime?>("BatteryVoltageDate");

                    b.Property<string>("DetectionStatus");

                    b.Property<DateTime?>("DetectionStatusDate");

                    b.Property<DateTime?>("HeartBeatDate");

                    b.Property<DateTime?>("LastDetectionOffDate");

                    b.Property<DateTime?>("LastDetectionOnDate");

                    b.Property<string>("Location");

                    b.Property<string>("MacAddress")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.Property<DateTime?>("ReRegisterDate");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int?>("UserId");

                    b.HasKey("SensorId");

                    b.HasAlternateKey("MacAddress")
                        .HasName("AlternateKey_MacAddress");

                    b.HasIndex("UserId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Nvs.Models.SensorLogItem", b =>
                {
                    b.Property<int>("SensorLogItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BatteryVoltage");

                    b.Property<int>("LogType");

                    b.Property<int>("SensorId");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("Value");

                    b.HasKey("SensorLogItemId");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorLogItems");
                });

            modelBuilder.Entity("Nvs.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DisabledDate");

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastLogOnDate");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<DateTime>("PasswordChangedDate");

                    b.Property<string>("UniqueIdentifier");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nvs.Models.UserLogItem", b =>
                {
                    b.Property<int>("UserLogItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LogItemType");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("UserLogItemId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogItems");
                });

            modelBuilder.Entity("Nvs.Models.Sensor", b =>
                {
                    b.HasOne("Nvs.Models.User", "User")
                        .WithMany("Sensors")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Nvs.Models.SensorLogItem", b =>
                {
                    b.HasOne("Nvs.Models.Sensor", "Sensor")
                        .WithMany("LogItems")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nvs.Models.UserLogItem", b =>
                {
                    b.HasOne("Nvs.Models.User", "User")
                        .WithMany("LogItems")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ForeignKey_UserLogItem_User")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
